# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.account_status import AccountStatus  # noqa: F401,E501
from swagger_server.models.account_type import AccountType  # noqa: F401,E501
from swagger_server.models.active_or_historic_currency_code import ActiveOrHistoricCurrencyCode  # noqa: F401,E501
from swagger_server.models.branch_and_financial_institution_identification import BranchAndFinancialInstitutionIdentification  # noqa: F401,E501
from swagger_server.models.cash_account import CashAccount  # noqa: F401,E501
from swagger_server.models.iso_date_time import ISODateTime  # noqa: F401,E501
from swagger_server.models.party_identification import PartyIdentification  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class Account(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, account_id: str=None, status: AccountStatus=None, status_update_date_time: ISODateTime=None, currency: ActiveOrHistoricCurrencyCode=None, account_type: AccountType=None, account_description: str=None, account_details: List[CashAccount]=None, owner: PartyIdentification=None, servicer: BranchAndFinancialInstitutionIdentification=None):  # noqa: E501
        """Account - a model defined in Swagger

        :param account_id: The account_id of this Account.  # noqa: E501
        :type account_id: str
        :param status: The status of this Account.  # noqa: E501
        :type status: AccountStatus
        :param status_update_date_time: The status_update_date_time of this Account.  # noqa: E501
        :type status_update_date_time: ISODateTime
        :param currency: The currency of this Account.  # noqa: E501
        :type currency: ActiveOrHistoricCurrencyCode
        :param account_type: The account_type of this Account.  # noqa: E501
        :type account_type: AccountType
        :param account_description: The account_description of this Account.  # noqa: E501
        :type account_description: str
        :param account_details: The account_details of this Account.  # noqa: E501
        :type account_details: List[CashAccount]
        :param owner: The owner of this Account.  # noqa: E501
        :type owner: PartyIdentification
        :param servicer: The servicer of this Account.  # noqa: E501
        :type servicer: BranchAndFinancialInstitutionIdentification
        """
        self.swagger_types = {
            'account_id': str,
            'status': AccountStatus,
            'status_update_date_time': ISODateTime,
            'currency': ActiveOrHistoricCurrencyCode,
            'account_type': AccountType,
            'account_description': str,
            'account_details': List[CashAccount],
            'owner': PartyIdentification,
            'servicer': BranchAndFinancialInstitutionIdentification
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'status': 'status',
            'status_update_date_time': 'statusUpdateDateTime',
            'currency': 'currency',
            'account_type': 'accountType',
            'account_description': 'accountDescription',
            'account_details': 'AccountDetails',
            'owner': 'Owner',
            'servicer': 'Servicer'
        }
        self._account_id = account_id
        self._status = status
        self._status_update_date_time = status_update_date_time
        self._currency = currency
        self._account_type = account_type
        self._account_description = account_description
        self._account_details = account_details
        self._owner = owner
        self._servicer = servicer

    @classmethod
    def from_dict(cls, dikt) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Account of this Account.  # noqa: E501
        :rtype: Account
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self) -> str:
        """Gets the account_id of this Account.

        Уникальный и неизменный идентификатор, используемый для идентификации ресурса  # noqa: E501

        :return: The account_id of this Account.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this Account.

        Уникальный и неизменный идентификатор, используемый для идентификации ресурса  # noqa: E501

        :param account_id: The account_id of this Account.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def status(self) -> AccountStatus:
        """Gets the status of this Account.


        :return: The status of this Account.
        :rtype: AccountStatus
        """
        return self._status

    @status.setter
    def status(self, status: AccountStatus):
        """Sets the status of this Account.


        :param status: The status of this Account.
        :type status: AccountStatus
        """

        self._status = status

    @property
    def status_update_date_time(self) -> ISODateTime:
        """Gets the status_update_date_time of this Account.


        :return: The status_update_date_time of this Account.
        :rtype: ISODateTime
        """
        return self._status_update_date_time

    @status_update_date_time.setter
    def status_update_date_time(self, status_update_date_time: ISODateTime):
        """Sets the status_update_date_time of this Account.


        :param status_update_date_time: The status_update_date_time of this Account.
        :type status_update_date_time: ISODateTime
        """

        self._status_update_date_time = status_update_date_time

    @property
    def currency(self) -> ActiveOrHistoricCurrencyCode:
        """Gets the currency of this Account.


        :return: The currency of this Account.
        :rtype: ActiveOrHistoricCurrencyCode
        """
        return self._currency

    @currency.setter
    def currency(self, currency: ActiveOrHistoricCurrencyCode):
        """Sets the currency of this Account.


        :param currency: The currency of this Account.
        :type currency: ActiveOrHistoricCurrencyCode
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def account_type(self) -> AccountType:
        """Gets the account_type of this Account.


        :return: The account_type of this Account.
        :rtype: AccountType
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type: AccountType):
        """Sets the account_type of this Account.


        :param account_type: The account_type of this Account.
        :type account_type: AccountType
        """
        if account_type is None:
            raise ValueError("Invalid value for `account_type`, must not be `None`")  # noqa: E501

        self._account_type = account_type

    @property
    def account_description(self) -> str:
        """Gets the account_description of this Account.

        Краткое описание назначения счета или продукта, привязанного к счету  # noqa: E501

        :return: The account_description of this Account.
        :rtype: str
        """
        return self._account_description

    @account_description.setter
    def account_description(self, account_description: str):
        """Sets the account_description of this Account.

        Краткое описание назначения счета или продукта, привязанного к счету  # noqa: E501

        :param account_description: The account_description of this Account.
        :type account_description: str
        """

        self._account_description = account_description

    @property
    def account_details(self) -> List[CashAccount]:
        """Gets the account_details of this Account.

        Идентификация счета  # noqa: E501

        :return: The account_details of this Account.
        :rtype: List[CashAccount]
        """
        return self._account_details

    @account_details.setter
    def account_details(self, account_details: List[CashAccount]):
        """Sets the account_details of this Account.

        Идентификация счета  # noqa: E501

        :param account_details: The account_details of this Account.
        :type account_details: List[CashAccount]
        """

        self._account_details = account_details

    @property
    def owner(self) -> PartyIdentification:
        """Gets the owner of this Account.


        :return: The owner of this Account.
        :rtype: PartyIdentification
        """
        return self._owner

    @owner.setter
    def owner(self, owner: PartyIdentification):
        """Sets the owner of this Account.


        :param owner: The owner of this Account.
        :type owner: PartyIdentification
        """

        self._owner = owner

    @property
    def servicer(self) -> BranchAndFinancialInstitutionIdentification:
        """Gets the servicer of this Account.


        :return: The servicer of this Account.
        :rtype: BranchAndFinancialInstitutionIdentification
        """
        return self._servicer

    @servicer.setter
    def servicer(self, servicer: BranchAndFinancialInstitutionIdentification):
        """Sets the servicer of this Account.


        :param servicer: The servicer of this Account.
        :type servicer: BranchAndFinancialInstitutionIdentification
        """

        self._servicer = servicer
