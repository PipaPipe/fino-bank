# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.active_or_historic_currency_and_amount import ActiveOrHistoricCurrencyAndAmount  # noqa: F401,E501
from swagger_server.models.credit_debit_code import CreditDebitCode  # noqa: F401,E501
from swagger_server import util


class Balance(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, account_id: str=None, amount: ActiveOrHistoricCurrencyAndAmount=None, credit_debit_indicator: CreditDebitCode=None):  # noqa: E501
        """Balance - a model defined in Swagger

        :param account_id: The account_id of this Balance.  # noqa: E501
        :type account_id: str
        :param amount: The amount of this Balance.  # noqa: E501
        :type amount: ActiveOrHistoricCurrencyAndAmount
        :param credit_debit_indicator: The credit_debit_indicator of this Balance.  # noqa: E501
        :type credit_debit_indicator: CreditDebitCode
        """
        self.swagger_types = {
            'account_id': str,
            'amount': ActiveOrHistoricCurrencyAndAmount,
            'credit_debit_indicator': CreditDebitCode
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'amount': 'Amount',
            'credit_debit_indicator': 'creditDebitIndicator'
        }
        self._account_id = account_id
        self._amount = amount
        self._credit_debit_indicator = credit_debit_indicator

    @classmethod
    def from_dict(cls, dikt) -> 'Balance':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Balance of this Balance.  # noqa: E501
        :rtype: Balance
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self) -> str:
        """Gets the account_id of this Balance.

        Уникальный и неизменный идентификатор, используемый для идентификации ресурса счета  # noqa: E501

        :return: The account_id of this Balance.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this Balance.

        Уникальный и неизменный идентификатор, используемый для идентификации ресурса счета  # noqa: E501

        :param account_id: The account_id of this Balance.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def amount(self) -> ActiveOrHistoricCurrencyAndAmount:
        """Gets the amount of this Balance.


        :return: The amount of this Balance.
        :rtype: ActiveOrHistoricCurrencyAndAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount: ActiveOrHistoricCurrencyAndAmount):
        """Sets the amount of this Balance.


        :param amount: The amount of this Balance.
        :type amount: ActiveOrHistoricCurrencyAndAmount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def credit_debit_indicator(self) -> CreditDebitCode:
        """Gets the credit_debit_indicator of this Balance.


        :return: The credit_debit_indicator of this Balance.
        :rtype: CreditDebitCode
        """
        return self._credit_debit_indicator

    @credit_debit_indicator.setter
    def credit_debit_indicator(self, credit_debit_indicator: CreditDebitCode):
        """Sets the credit_debit_indicator of this Balance.


        :param credit_debit_indicator: The credit_debit_indicator of this Balance.
        :type credit_debit_indicator: CreditDebitCode
        """

        self._credit_debit_indicator = credit_debit_indicator
