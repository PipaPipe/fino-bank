# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.account_identification_code import AccountIdentificationCode  # noqa: F401,E501
from swagger_server import util


class CashAccount(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, scheme_name: AccountIdentificationCode=None, identification: str=None):  # noqa: E501
        """CashAccount - a model defined in Swagger

        :param name: The name of this CashAccount.  # noqa: E501
        :type name: str
        :param scheme_name: The scheme_name of this CashAccount.  # noqa: E501
        :type scheme_name: AccountIdentificationCode
        :param identification: The identification of this CashAccount.  # noqa: E501
        :type identification: str
        """
        self.swagger_types = {
            'name': str,
            'scheme_name': AccountIdentificationCode,
            'identification': str
        }

        self.attribute_map = {
            'name': 'name',
            'scheme_name': 'schemeName',
            'identification': 'identification'
        }
        self._name = name
        self._scheme_name = scheme_name
        self._identification = identification

    @classmethod
    def from_dict(cls, dikt) -> 'CashAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CashAccount of this CashAccount.  # noqa: E501
        :rtype: CashAccount
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this CashAccount.

        Наименование счета, присвоенное учреждением, обслуживающим счет, по согласованию с владельцем счета  для обеспечения дополнительных средств идентификации счета  # noqa: E501

        :return: The name of this CashAccount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CashAccount.

        Наименование счета, присвоенное учреждением, обслуживающим счет, по согласованию с владельцем счета  для обеспечения дополнительных средств идентификации счета  # noqa: E501

        :param name: The name of this CashAccount.
        :type name: str
        """

        self._name = name

    @property
    def scheme_name(self) -> AccountIdentificationCode:
        """Gets the scheme_name of this CashAccount.


        :return: The scheme_name of this CashAccount.
        :rtype: AccountIdentificationCode
        """
        return self._scheme_name

    @scheme_name.setter
    def scheme_name(self, scheme_name: AccountIdentificationCode):
        """Sets the scheme_name of this CashAccount.


        :param scheme_name: The scheme_name of this CashAccount.
        :type scheme_name: AccountIdentificationCode
        """
        if scheme_name is None:
            raise ValueError("Invalid value for `scheme_name`, must not be `None`")  # noqa: E501

        self._scheme_name = scheme_name

    @property
    def identification(self) -> str:
        """Gets the identification of this CashAccount.

        Идентификатор счета соответствующий схеме идентификации, известный владельцу счета (номер банковского счета, номер карты, номер телефона ...)  # noqa: E501

        :return: The identification of this CashAccount.
        :rtype: str
        """
        return self._identification

    @identification.setter
    def identification(self, identification: str):
        """Sets the identification of this CashAccount.

        Идентификатор счета соответствующий схеме идентификации, известный владельцу счета (номер банковского счета, номер карты, номер телефона ...)  # noqa: E501

        :param identification: The identification of this CashAccount.
        :type identification: str
        """
        if identification is None:
            raise ValueError("Invalid value for `identification`, must not be `None`")  # noqa: E501

        self._identification = identification
