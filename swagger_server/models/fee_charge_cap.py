# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.active_currency_and_amount_simple_type import ActiveCurrencyAndAmountSimpleType  # noqa: F401,E501
from swagger_server.models.period_unit import PeriodUnit  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class FeeChargeCap(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, min_max_type: str=None, fee_cap_occurrence: int=None, fee_cap_amount: ActiveCurrencyAndAmountSimpleType=None, capping_period: PeriodUnit=None):  # noqa: E501
        """FeeChargeCap - a model defined in Swagger

        :param min_max_type: The min_max_type of this FeeChargeCap.  # noqa: E501
        :type min_max_type: str
        :param fee_cap_occurrence: The fee_cap_occurrence of this FeeChargeCap.  # noqa: E501
        :type fee_cap_occurrence: int
        :param fee_cap_amount: The fee_cap_amount of this FeeChargeCap.  # noqa: E501
        :type fee_cap_amount: ActiveCurrencyAndAmountSimpleType
        :param capping_period: The capping_period of this FeeChargeCap.  # noqa: E501
        :type capping_period: PeriodUnit
        """
        self.swagger_types = {
            'min_max_type': str,
            'fee_cap_occurrence': int,
            'fee_cap_amount': ActiveCurrencyAndAmountSimpleType,
            'capping_period': PeriodUnit
        }

        self.attribute_map = {
            'min_max_type': 'minMaxType',
            'fee_cap_occurrence': 'feeCapOccurrence',
            'fee_cap_amount': 'feeCapAmount',
            'capping_period': 'cappingPeriod'
        }
        self._min_max_type = min_max_type
        self._fee_cap_occurrence = fee_cap_occurrence
        self._fee_cap_amount = fee_cap_amount
        self._capping_period = capping_period

    @classmethod
    def from_dict(cls, dikt) -> 'FeeChargeCap':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeeChargeCap of this FeeChargeCap.  # noqa: E501
        :rtype: FeeChargeCap
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_max_type(self) -> str:
        """Gets the min_max_type of this FeeChargeCap.

        Указывает минимальная или максимальная комиссия  # noqa: E501

        :return: The min_max_type of this FeeChargeCap.
        :rtype: str
        """
        return self._min_max_type

    @min_max_type.setter
    def min_max_type(self, min_max_type: str):
        """Sets the min_max_type of this FeeChargeCap.

        Указывает минимальная или максимальная комиссия  # noqa: E501

        :param min_max_type: The min_max_type of this FeeChargeCap.
        :type min_max_type: str
        """
        allowed_values = ["Minimum", "Maximum"]  # noqa: E501
        if min_max_type not in allowed_values:
            raise ValueError(
                "Invalid value for `min_max_type` ({0}), must be one of {1}"
                .format(min_max_type, allowed_values)
            )

        self._min_max_type = min_max_type

    @property
    def fee_cap_occurrence(self) -> int:
        """Gets the fee_cap_occurrence of this FeeChargeCap.

        Комиссия / сборы / пени / штрафы фиксируются в зависимости от количества случаев, а не ограничиваются определенной суммой  # noqa: E501

        :return: The fee_cap_occurrence of this FeeChargeCap.
        :rtype: int
        """
        return self._fee_cap_occurrence

    @fee_cap_occurrence.setter
    def fee_cap_occurrence(self, fee_cap_occurrence: int):
        """Sets the fee_cap_occurrence of this FeeChargeCap.

        Комиссия / сборы / пени / штрафы фиксируются в зависимости от количества случаев, а не ограничиваются определенной суммой  # noqa: E501

        :param fee_cap_occurrence: The fee_cap_occurrence of this FeeChargeCap.
        :type fee_cap_occurrence: int
        """

        self._fee_cap_occurrence = fee_cap_occurrence

    @property
    def fee_cap_amount(self) -> ActiveCurrencyAndAmountSimpleType:
        """Gets the fee_cap_amount of this FeeChargeCap.


        :return: The fee_cap_amount of this FeeChargeCap.
        :rtype: ActiveCurrencyAndAmountSimpleType
        """
        return self._fee_cap_amount

    @fee_cap_amount.setter
    def fee_cap_amount(self, fee_cap_amount: ActiveCurrencyAndAmountSimpleType):
        """Sets the fee_cap_amount of this FeeChargeCap.


        :param fee_cap_amount: The fee_cap_amount of this FeeChargeCap.
        :type fee_cap_amount: ActiveCurrencyAndAmountSimpleType
        """

        self._fee_cap_amount = fee_cap_amount

    @property
    def capping_period(self) -> PeriodUnit:
        """Gets the capping_period of this FeeChargeCap.


        :return: The capping_period of this FeeChargeCap.
        :rtype: PeriodUnit
        """
        return self._capping_period

    @capping_period.setter
    def capping_period(self, capping_period: PeriodUnit):
        """Sets the capping_period of this FeeChargeCap.


        :param capping_period: The capping_period of this FeeChargeCap.
        :type capping_period: PeriodUnit
        """

        self._capping_period = capping_period
