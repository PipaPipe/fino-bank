# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GenericIdentification1(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, identification: str=None, scheme_name: str=None, issuer: str=None):  # noqa: E501
        """GenericIdentification1 - a model defined in Swagger

        :param identification: The identification of this GenericIdentification1.  # noqa: E501
        :type identification: str
        :param scheme_name: The scheme_name of this GenericIdentification1.  # noqa: E501
        :type scheme_name: str
        :param issuer: The issuer of this GenericIdentification1.  # noqa: E501
        :type issuer: str
        """
        self.swagger_types = {
            'identification': str,
            'scheme_name': str,
            'issuer': str
        }

        self.attribute_map = {
            'identification': 'identification',
            'scheme_name': 'schemeName',
            'issuer': 'issuer'
        }
        self._identification = identification
        self._scheme_name = scheme_name
        self._issuer = issuer

    @classmethod
    def from_dict(cls, dikt) -> 'GenericIdentification1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GenericIdentification1 of this GenericIdentification1.  # noqa: E501
        :rtype: GenericIdentification1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identification(self) -> str:
        """Gets the identification of this GenericIdentification1.

        Уникальный и однозначный идентификатор, присвоенный идентифицирующей организацией.  # noqa: E501

        :return: The identification of this GenericIdentification1.
        :rtype: str
        """
        return self._identification

    @identification.setter
    def identification(self, identification: str):
        """Sets the identification of this GenericIdentification1.

        Уникальный и однозначный идентификатор, присвоенный идентифицирующей организацией.  # noqa: E501

        :param identification: The identification of this GenericIdentification1.
        :type identification: str
        """
        if identification is None:
            raise ValueError("Invalid value for `identification`, must not be `None`")  # noqa: E501

        self._identification = identification

    @property
    def scheme_name(self) -> str:
        """Gets the scheme_name of this GenericIdentification1.

        Наименование идентификационной схемы  # noqa: E501

        :return: The scheme_name of this GenericIdentification1.
        :rtype: str
        """
        return self._scheme_name

    @scheme_name.setter
    def scheme_name(self, scheme_name: str):
        """Sets the scheme_name of this GenericIdentification1.

        Наименование идентификационной схемы  # noqa: E501

        :param scheme_name: The scheme_name of this GenericIdentification1.
        :type scheme_name: str
        """

        self._scheme_name = scheme_name

    @property
    def issuer(self) -> str:
        """Gets the issuer of this GenericIdentification1.

        Организация, установившая идентификацию  # noqa: E501

        :return: The issuer of this GenericIdentification1.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer: str):
        """Sets the issuer of this GenericIdentification1.

        Организация, установившая идентификацию  # noqa: E501

        :param issuer: The issuer of this GenericIdentification1.
        :type issuer: str
        """

        self._issuer = issuer
