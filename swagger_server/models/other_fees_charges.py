# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.fee_charge_cap import FeeChargeCap  # noqa: F401,E501
from swagger_server.models.fee_charge_detail import FeeChargeDetail  # noqa: F401,E501
from swagger_server import util


class OtherFeesCharges(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, tariff_name: str=None, fee_charge_detail: List[FeeChargeDetail]=None, fee_charge_cap: List[FeeChargeCap]=None, comments: str=None):  # noqa: E501
        """OtherFeesCharges - a model defined in Swagger

        :param tariff_name: The tariff_name of this OtherFeesCharges.  # noqa: E501
        :type tariff_name: str
        :param fee_charge_detail: The fee_charge_detail of this OtherFeesCharges.  # noqa: E501
        :type fee_charge_detail: List[FeeChargeDetail]
        :param fee_charge_cap: The fee_charge_cap of this OtherFeesCharges.  # noqa: E501
        :type fee_charge_cap: List[FeeChargeCap]
        :param comments: The comments of this OtherFeesCharges.  # noqa: E501
        :type comments: str
        """
        self.swagger_types = {
            'tariff_name': str,
            'fee_charge_detail': List[FeeChargeDetail],
            'fee_charge_cap': List[FeeChargeCap],
            'comments': str
        }

        self.attribute_map = {
            'tariff_name': 'tariffName',
            'fee_charge_detail': 'FeeChargeDetail',
            'fee_charge_cap': 'FeeChargeCap',
            'comments': 'comments'
        }
        self._tariff_name = tariff_name
        self._fee_charge_detail = fee_charge_detail
        self._fee_charge_cap = fee_charge_cap
        self._comments = comments

    @classmethod
    def from_dict(cls, dikt) -> 'OtherFeesCharges':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OtherFeesCharges of this OtherFeesCharges.  # noqa: E501
        :rtype: OtherFeesCharges
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tariff_name(self) -> str:
        """Gets the tariff_name of this OtherFeesCharges.

        Название тарифа  # noqa: E501

        :return: The tariff_name of this OtherFeesCharges.
        :rtype: str
        """
        return self._tariff_name

    @tariff_name.setter
    def tariff_name(self, tariff_name: str):
        """Sets the tariff_name of this OtherFeesCharges.

        Название тарифа  # noqa: E501

        :param tariff_name: The tariff_name of this OtherFeesCharges.
        :type tariff_name: str
        """

        self._tariff_name = tariff_name

    @property
    def fee_charge_detail(self) -> List[FeeChargeDetail]:
        """Gets the fee_charge_detail of this OtherFeesCharges.

        Подробная информация о комиссиях, сборах, пени и штрафах  # noqa: E501

        :return: The fee_charge_detail of this OtherFeesCharges.
        :rtype: List[FeeChargeDetail]
        """
        return self._fee_charge_detail

    @fee_charge_detail.setter
    def fee_charge_detail(self, fee_charge_detail: List[FeeChargeDetail]):
        """Sets the fee_charge_detail of this OtherFeesCharges.

        Подробная информация о комиссиях, сборах, пени и штрафах  # noqa: E501

        :param fee_charge_detail: The fee_charge_detail of this OtherFeesCharges.
        :type fee_charge_detail: List[FeeChargeDetail]
        """
        if fee_charge_detail is None:
            raise ValueError("Invalid value for `fee_charge_detail`, must not be `None`")  # noqa: E501

        self._fee_charge_detail = fee_charge_detail

    @property
    def fee_charge_cap(self) -> List[FeeChargeCap]:
        """Gets the fee_charge_cap of this OtherFeesCharges.

        Подробная информация о любых ограничениях (минимальных / максимальных сборах), которые применяются к конкретной комиссии / сбору / пени / штрафу  # noqa: E501

        :return: The fee_charge_cap of this OtherFeesCharges.
        :rtype: List[FeeChargeCap]
        """
        return self._fee_charge_cap

    @fee_charge_cap.setter
    def fee_charge_cap(self, fee_charge_cap: List[FeeChargeCap]):
        """Sets the fee_charge_cap of this OtherFeesCharges.

        Подробная информация о любых ограничениях (минимальных / максимальных сборах), которые применяются к конкретной комиссии / сбору / пени / штрафу  # noqa: E501

        :param fee_charge_cap: The fee_charge_cap of this OtherFeesCharges.
        :type fee_charge_cap: List[FeeChargeCap]
        """

        self._fee_charge_cap = fee_charge_cap

    @property
    def comments(self) -> str:
        """Gets the comments of this OtherFeesCharges.

        Комментарии и описания  # noqa: E501

        :return: The comments of this OtherFeesCharges.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments: str):
        """Sets the comments of this OtherFeesCharges.

        Комментарии и описания  # noqa: E501

        :param comments: The comments of this OtherFeesCharges.
        :type comments: str
        """

        self._comments = comments
