# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.country_code import CountryCode  # noqa: F401,E501
from swagger_server.models.identification_type import IdentificationType  # noqa: F401,E501
from swagger_server.models.iso_date_time import ISODateTime  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class PartyIdentification(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, mobile_number: str=None, country_of_residence: CountryCode=None, birth_date: ISODateTime=None, identification: List[IdentificationType]=None):  # noqa: E501
        """PartyIdentification - a model defined in Swagger

        :param name: The name of this PartyIdentification.  # noqa: E501
        :type name: str
        :param mobile_number: The mobile_number of this PartyIdentification.  # noqa: E501
        :type mobile_number: str
        :param country_of_residence: The country_of_residence of this PartyIdentification.  # noqa: E501
        :type country_of_residence: CountryCode
        :param birth_date: The birth_date of this PartyIdentification.  # noqa: E501
        :type birth_date: ISODateTime
        :param identification: The identification of this PartyIdentification.  # noqa: E501
        :type identification: List[IdentificationType]
        """
        self.swagger_types = {
            'name': str,
            'mobile_number': str,
            'country_of_residence': CountryCode,
            'birth_date': ISODateTime,
            'identification': List[IdentificationType]
        }

        self.attribute_map = {
            'name': 'name',
            'mobile_number': 'mobileNumber',
            'country_of_residence': 'countryOfResidence',
            'birth_date': 'birthDate',
            'identification': 'Identification'
        }
        self._name = name
        self._mobile_number = mobile_number
        self._country_of_residence = country_of_residence
        self._birth_date = birth_date
        self._identification = identification

    @classmethod
    def from_dict(cls, dikt) -> 'PartyIdentification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PartyIdentification of this PartyIdentification.  # noqa: E501
        :rtype: PartyIdentification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this PartyIdentification.

        Наименование организации или имя физического лица  # noqa: E501

        :return: The name of this PartyIdentification.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PartyIdentification.

        Наименование организации или имя физического лица  # noqa: E501

        :param name: The name of this PartyIdentification.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def mobile_number(self) -> str:
        """Gets the mobile_number of this PartyIdentification.

        Номер мобильного телефона  # noqa: E501

        :return: The mobile_number of this PartyIdentification.
        :rtype: str
        """
        return self._mobile_number

    @mobile_number.setter
    def mobile_number(self, mobile_number: str):
        """Sets the mobile_number of this PartyIdentification.

        Номер мобильного телефона  # noqa: E501

        :param mobile_number: The mobile_number of this PartyIdentification.
        :type mobile_number: str
        """

        self._mobile_number = mobile_number

    @property
    def country_of_residence(self) -> CountryCode:
        """Gets the country_of_residence of this PartyIdentification.


        :return: The country_of_residence of this PartyIdentification.
        :rtype: CountryCode
        """
        return self._country_of_residence

    @country_of_residence.setter
    def country_of_residence(self, country_of_residence: CountryCode):
        """Sets the country_of_residence of this PartyIdentification.


        :param country_of_residence: The country_of_residence of this PartyIdentification.
        :type country_of_residence: CountryCode
        """

        self._country_of_residence = country_of_residence

    @property
    def birth_date(self) -> ISODateTime:
        """Gets the birth_date of this PartyIdentification.


        :return: The birth_date of this PartyIdentification.
        :rtype: ISODateTime
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date: ISODateTime):
        """Sets the birth_date of this PartyIdentification.


        :param birth_date: The birth_date of this PartyIdentification.
        :type birth_date: ISODateTime
        """

        self._birth_date = birth_date

    @property
    def identification(self) -> List[IdentificationType]:
        """Gets the identification of this PartyIdentification.

        Идентификация юридического или физического лица.  # noqa: E501

        :return: The identification of this PartyIdentification.
        :rtype: List[IdentificationType]
        """
        return self._identification

    @identification.setter
    def identification(self, identification: List[IdentificationType]):
        """Sets the identification of this PartyIdentification.

        Идентификация юридического или физического лица.  # noqa: E501

        :param identification: The identification of this PartyIdentification.
        :type identification: List[IdentificationType]
        """
        if identification is None:
            raise ValueError("Invalid value for `identification`, must not be `None`")  # noqa: E501

        self._identification = identification
