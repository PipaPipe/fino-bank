# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.country_code_numeric import CountryCodeNumeric  # noqa: F401,E501
from swagger_server.models.generic_identification1 import GenericIdentification1  # noqa: F401,E501
from swagger_server.models.plain_card_data1 import PlainCardData1  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class PaymentCard4(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, plain_card_data: PlainCardData1=None, card_country_code: CountryCodeNumeric=None, card_brand: GenericIdentification1=None, additional_card_data: str=None):  # noqa: E501
        """PaymentCard4 - a model defined in Swagger

        :param plain_card_data: The plain_card_data of this PaymentCard4.  # noqa: E501
        :type plain_card_data: PlainCardData1
        :param card_country_code: The card_country_code of this PaymentCard4.  # noqa: E501
        :type card_country_code: CountryCodeNumeric
        :param card_brand: The card_brand of this PaymentCard4.  # noqa: E501
        :type card_brand: GenericIdentification1
        :param additional_card_data: The additional_card_data of this PaymentCard4.  # noqa: E501
        :type additional_card_data: str
        """
        self.swagger_types = {
            'plain_card_data': PlainCardData1,
            'card_country_code': CountryCodeNumeric,
            'card_brand': GenericIdentification1,
            'additional_card_data': str
        }

        self.attribute_map = {
            'plain_card_data': 'PlainCardData',
            'card_country_code': 'cardCountryCode',
            'card_brand': 'CardBrand',
            'additional_card_data': 'additionalCardData'
        }
        self._plain_card_data = plain_card_data
        self._card_country_code = card_country_code
        self._card_brand = card_brand
        self._additional_card_data = additional_card_data

    @classmethod
    def from_dict(cls, dikt) -> 'PaymentCard4':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PaymentCard4 of this PaymentCard4.  # noqa: E501
        :rtype: PaymentCard4
        """
        return util.deserialize_model(dikt, cls)

    @property
    def plain_card_data(self) -> PlainCardData1:
        """Gets the plain_card_data of this PaymentCard4.


        :return: The plain_card_data of this PaymentCard4.
        :rtype: PlainCardData1
        """
        return self._plain_card_data

    @plain_card_data.setter
    def plain_card_data(self, plain_card_data: PlainCardData1):
        """Sets the plain_card_data of this PaymentCard4.


        :param plain_card_data: The plain_card_data of this PaymentCard4.
        :type plain_card_data: PlainCardData1
        """

        self._plain_card_data = plain_card_data

    @property
    def card_country_code(self) -> CountryCodeNumeric:
        """Gets the card_country_code of this PaymentCard4.


        :return: The card_country_code of this PaymentCard4.
        :rtype: CountryCodeNumeric
        """
        return self._card_country_code

    @card_country_code.setter
    def card_country_code(self, card_country_code: CountryCodeNumeric):
        """Sets the card_country_code of this PaymentCard4.


        :param card_country_code: The card_country_code of this PaymentCard4.
        :type card_country_code: CountryCodeNumeric
        """

        self._card_country_code = card_country_code

    @property
    def card_brand(self) -> GenericIdentification1:
        """Gets the card_brand of this PaymentCard4.


        :return: The card_brand of this PaymentCard4.
        :rtype: GenericIdentification1
        """
        return self._card_brand

    @card_brand.setter
    def card_brand(self, card_brand: GenericIdentification1):
        """Sets the card_brand of this PaymentCard4.


        :param card_brand: The card_brand of this PaymentCard4.
        :type card_brand: GenericIdentification1
        """

        self._card_brand = card_brand

    @property
    def additional_card_data(self) -> str:
        """Gets the additional_card_data of this PaymentCard4.

        Дополнительные сведения, специфичные для эмитента карты  # noqa: E501

        :return: The additional_card_data of this PaymentCard4.
        :rtype: str
        """
        return self._additional_card_data

    @additional_card_data.setter
    def additional_card_data(self, additional_card_data: str):
        """Sets the additional_card_data of this PaymentCard4.

        Дополнительные сведения, специфичные для эмитента карты  # noqa: E501

        :param additional_card_data: The additional_card_data of this PaymentCard4.
        :type additional_card_data: str
        """

        self._additional_card_data = additional_card_data
