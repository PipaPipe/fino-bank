# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.card_security_information1 import CardSecurityInformation1  # noqa: F401,E501
from swagger_server.models.iso_year_month import ISOYearMonth  # noqa: F401,E501
from swagger_server.models.track_data1 import TrackData1  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class PlainCardData1(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, pan: str=None, card_sequence_number: str=None, effective_date: ISOYearMonth=None, expiry_date: ISOYearMonth=None, service_code: str=None, track_data: List[TrackData1]=None, card_security_code: CardSecurityInformation1=None):  # noqa: E501
        """PlainCardData1 - a model defined in Swagger

        :param pan: The pan of this PlainCardData1.  # noqa: E501
        :type pan: str
        :param card_sequence_number: The card_sequence_number of this PlainCardData1.  # noqa: E501
        :type card_sequence_number: str
        :param effective_date: The effective_date of this PlainCardData1.  # noqa: E501
        :type effective_date: ISOYearMonth
        :param expiry_date: The expiry_date of this PlainCardData1.  # noqa: E501
        :type expiry_date: ISOYearMonth
        :param service_code: The service_code of this PlainCardData1.  # noqa: E501
        :type service_code: str
        :param track_data: The track_data of this PlainCardData1.  # noqa: E501
        :type track_data: List[TrackData1]
        :param card_security_code: The card_security_code of this PlainCardData1.  # noqa: E501
        :type card_security_code: CardSecurityInformation1
        """
        self.swagger_types = {
            'pan': str,
            'card_sequence_number': str,
            'effective_date': ISOYearMonth,
            'expiry_date': ISOYearMonth,
            'service_code': str,
            'track_data': List[TrackData1],
            'card_security_code': CardSecurityInformation1
        }

        self.attribute_map = {
            'pan': 'PAN',
            'card_sequence_number': 'cardSequenceNumber',
            'effective_date': 'effectiveDate',
            'expiry_date': 'expiryDate',
            'service_code': 'serviceCode',
            'track_data': 'TrackData',
            'card_security_code': 'CardSecurityCode'
        }
        self._pan = pan
        self._card_sequence_number = card_sequence_number
        self._effective_date = effective_date
        self._expiry_date = expiry_date
        self._service_code = service_code
        self._track_data = track_data
        self._card_security_code = card_security_code

    @classmethod
    def from_dict(cls, dikt) -> 'PlainCardData1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PlainCardData1 of this PlainCardData1.  # noqa: E501
        :rtype: PlainCardData1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pan(self) -> str:
        """Gets the pan of this PlainCardData1.

        Основной учетный номер карты (PAN) или номер карты  # noqa: E501

        :return: The pan of this PlainCardData1.
        :rtype: str
        """
        return self._pan

    @pan.setter
    def pan(self, pan: str):
        """Sets the pan of this PlainCardData1.

        Основной учетный номер карты (PAN) или номер карты  # noqa: E501

        :param pan: The pan of this PlainCardData1.
        :type pan: str
        """
        if pan is None:
            raise ValueError("Invalid value for `pan`, must not be `None`")  # noqa: E501

        self._pan = pan

    @property
    def card_sequence_number(self) -> str:
        """Gets the card_sequence_number of this PlainCardData1.

        Идентификатор карты среди множества карт с одинаковым номером карты (PAN)  # noqa: E501

        :return: The card_sequence_number of this PlainCardData1.
        :rtype: str
        """
        return self._card_sequence_number

    @card_sequence_number.setter
    def card_sequence_number(self, card_sequence_number: str):
        """Sets the card_sequence_number of this PlainCardData1.

        Идентификатор карты среди множества карт с одинаковым номером карты (PAN)  # noqa: E501

        :param card_sequence_number: The card_sequence_number of this PlainCardData1.
        :type card_sequence_number: str
        """

        self._card_sequence_number = card_sequence_number

    @property
    def effective_date(self) -> ISOYearMonth:
        """Gets the effective_date of this PlainCardData1.


        :return: The effective_date of this PlainCardData1.
        :rtype: ISOYearMonth
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date: ISOYearMonth):
        """Sets the effective_date of this PlainCardData1.


        :param effective_date: The effective_date of this PlainCardData1.
        :type effective_date: ISOYearMonth
        """

        self._effective_date = effective_date

    @property
    def expiry_date(self) -> ISOYearMonth:
        """Gets the expiry_date of this PlainCardData1.


        :return: The expiry_date of this PlainCardData1.
        :rtype: ISOYearMonth
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date: ISOYearMonth):
        """Sets the expiry_date of this PlainCardData1.


        :param expiry_date: The expiry_date of this PlainCardData1.
        :type expiry_date: ISOYearMonth
        """
        if expiry_date is None:
            raise ValueError("Invalid value for `expiry_date`, must not be `None`")  # noqa: E501

        self._expiry_date = expiry_date

    @property
    def service_code(self) -> str:
        """Gets the service_code of this PlainCardData1.

        Услуги по карте в соответствии с ISO 7813  # noqa: E501

        :return: The service_code of this PlainCardData1.
        :rtype: str
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code: str):
        """Sets the service_code of this PlainCardData1.

        Услуги по карте в соответствии с ISO 7813  # noqa: E501

        :param service_code: The service_code of this PlainCardData1.
        :type service_code: str
        """

        self._service_code = service_code

    @property
    def track_data(self) -> List[TrackData1]:
        """Gets the track_data of this PlainCardData1.

        Данные магнитной дорожки платежной карты или их эквивалент  # noqa: E501

        :return: The track_data of this PlainCardData1.
        :rtype: List[TrackData1]
        """
        return self._track_data

    @track_data.setter
    def track_data(self, track_data: List[TrackData1]):
        """Sets the track_data of this PlainCardData1.

        Данные магнитной дорожки платежной карты или их эквивалент  # noqa: E501

        :param track_data: The track_data of this PlainCardData1.
        :type track_data: List[TrackData1]
        """

        self._track_data = track_data

    @property
    def card_security_code(self) -> CardSecurityInformation1:
        """Gets the card_security_code of this PlainCardData1.


        :return: The card_security_code of this PlainCardData1.
        :rtype: CardSecurityInformation1
        """
        return self._card_security_code

    @card_security_code.setter
    def card_security_code(self, card_security_code: CardSecurityInformation1):
        """Sets the card_security_code of this PlainCardData1.


        :param card_security_code: The card_security_code of this PlainCardData1.
        :type card_security_code: CardSecurityInformation1
        """

        self._card_security_code = card_security_code
