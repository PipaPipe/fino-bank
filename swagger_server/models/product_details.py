# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.period_unit import PeriodUnit  # noqa: F401,E501
from swagger_server import util


class ProductDetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, active: bool=None, fee_free_length: int=None, fee_free_length_period: PeriodUnit=None, comments: str=None):  # noqa: E501
        """ProductDetails - a model defined in Swagger

        :param active: The active of this ProductDetails.  # noqa: E501
        :type active: bool
        :param fee_free_length: The fee_free_length of this ProductDetails.  # noqa: E501
        :type fee_free_length: int
        :param fee_free_length_period: The fee_free_length_period of this ProductDetails.  # noqa: E501
        :type fee_free_length_period: PeriodUnit
        :param comments: The comments of this ProductDetails.  # noqa: E501
        :type comments: str
        """
        self.swagger_types = {
            'active': bool,
            'fee_free_length': int,
            'fee_free_length_period': PeriodUnit,
            'comments': str
        }

        self.attribute_map = {
            'active': 'active',
            'fee_free_length': 'feeFreeLength',
            'fee_free_length_period': 'feeFreeLengthPeriod',
            'comments': 'comments'
        }
        self._active = active
        self._fee_free_length = fee_free_length
        self._fee_free_length_period = fee_free_length_period
        self._comments = comments

    @classmethod
    def from_dict(cls, dikt) -> 'ProductDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProductDetails of this ProductDetails.  # noqa: E501
        :rtype: ProductDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self) -> bool:
        """Gets the active of this ProductDetails.

        Признак активности продукта  # noqa: E501

        :return: The active of this ProductDetails.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this ProductDetails.

        Признак активности продукта  # noqa: E501

        :param active: The active of this ProductDetails.
        :type active: bool
        """

        self._active = active

    @property
    def fee_free_length(self) -> int:
        """Gets the fee_free_length of this ProductDetails.

        Продолжительность бесплатного или рекламного периода  # noqa: E501

        :return: The fee_free_length of this ProductDetails.
        :rtype: int
        """
        return self._fee_free_length

    @fee_free_length.setter
    def fee_free_length(self, fee_free_length: int):
        """Sets the fee_free_length of this ProductDetails.

        Продолжительность бесплатного или рекламного периода  # noqa: E501

        :param fee_free_length: The fee_free_length of this ProductDetails.
        :type fee_free_length: int
        """

        self._fee_free_length = fee_free_length

    @property
    def fee_free_length_period(self) -> PeriodUnit:
        """Gets the fee_free_length_period of this ProductDetails.


        :return: The fee_free_length_period of this ProductDetails.
        :rtype: PeriodUnit
        """
        return self._fee_free_length_period

    @fee_free_length_period.setter
    def fee_free_length_period(self, fee_free_length_period: PeriodUnit):
        """Sets the fee_free_length_period of this ProductDetails.


        :param fee_free_length_period: The fee_free_length_period of this ProductDetails.
        :type fee_free_length_period: PeriodUnit
        """

        self._fee_free_length_period = fee_free_length_period

    @property
    def comments(self) -> str:
        """Gets the comments of this ProductDetails.

        Комментарии и описания  # noqa: E501

        :return: The comments of this ProductDetails.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments: str):
        """Sets the comments of this ProductDetails.

        Комментарии и описания  # noqa: E501

        :param comments: The comments of this ProductDetails.
        :type comments: str
        """

        self._comments = comments
