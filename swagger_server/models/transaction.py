# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.active_or_historic_currency_and_amount import ActiveOrHistoricCurrencyAndAmount  # noqa: F401,E501
from swagger_server.models.balance import Balance  # noqa: F401,E501
from swagger_server.models.branch_and_financial_institution_identification import BranchAndFinancialInstitutionIdentification  # noqa: F401,E501
from swagger_server.models.cash_account import CashAccount  # noqa: F401,E501
from swagger_server.models.credit_debit_code import CreditDebitCode  # noqa: F401,E501
from swagger_server.models.iso_date_time import ISODateTime  # noqa: F401,E501
from swagger_server.models.party_identification import PartyIdentification  # noqa: F401,E501
from swagger_server.models.transaction_status_code import TransactionStatusCode  # noqa: F401,E501
from swagger_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, account_id: str=None, transaction_identification: str=None, credit_debit_indicator: CreditDebitCode=None, status: TransactionStatusCode=None, value_date_time: ISODateTime=None, amount: ActiveOrHistoricCurrencyAndAmount=None, balance: Balance=None, debtor: PartyIdentification=None, debtor_agent: BranchAndFinancialInstitutionIdentification=None, debtor_account: CashAccount=None, creditor_agent: BranchAndFinancialInstitutionIdentification=None, creditor_account: CashAccount=None, creditor: PartyIdentification=None, remittance_information: str=None):  # noqa: E501
        """Transaction - a model defined in Swagger

        :param account_id: The account_id of this Transaction.  # noqa: E501
        :type account_id: str
        :param transaction_identification: The transaction_identification of this Transaction.  # noqa: E501
        :type transaction_identification: str
        :param credit_debit_indicator: The credit_debit_indicator of this Transaction.  # noqa: E501
        :type credit_debit_indicator: CreditDebitCode
        :param status: The status of this Transaction.  # noqa: E501
        :type status: TransactionStatusCode
        :param value_date_time: The value_date_time of this Transaction.  # noqa: E501
        :type value_date_time: ISODateTime
        :param amount: The amount of this Transaction.  # noqa: E501
        :type amount: ActiveOrHistoricCurrencyAndAmount
        :param balance: The balance of this Transaction.  # noqa: E501
        :type balance: Balance
        :param debtor: The debtor of this Transaction.  # noqa: E501
        :type debtor: PartyIdentification
        :param debtor_agent: The debtor_agent of this Transaction.  # noqa: E501
        :type debtor_agent: BranchAndFinancialInstitutionIdentification
        :param debtor_account: The debtor_account of this Transaction.  # noqa: E501
        :type debtor_account: CashAccount
        :param creditor_agent: The creditor_agent of this Transaction.  # noqa: E501
        :type creditor_agent: BranchAndFinancialInstitutionIdentification
        :param creditor_account: The creditor_account of this Transaction.  # noqa: E501
        :type creditor_account: CashAccount
        :param creditor: The creditor of this Transaction.  # noqa: E501
        :type creditor: PartyIdentification
        :param remittance_information: The remittance_information of this Transaction.  # noqa: E501
        :type remittance_information: str
        """
        self.swagger_types = {
            'account_id': str,
            'transaction_identification': str,
            'credit_debit_indicator': CreditDebitCode,
            'status': TransactionStatusCode,
            'value_date_time': ISODateTime,
            'amount': ActiveOrHistoricCurrencyAndAmount,
            'balance': Balance,
            'debtor': PartyIdentification,
            'debtor_agent': BranchAndFinancialInstitutionIdentification,
            'debtor_account': CashAccount,
            'creditor_agent': BranchAndFinancialInstitutionIdentification,
            'creditor_account': CashAccount,
            'creditor': PartyIdentification,
            'remittance_information': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'transaction_identification': 'transactionIdentification',
            'credit_debit_indicator': 'creditDebitIndicator',
            'status': 'status',
            'value_date_time': 'valueDateTime',
            'amount': 'Amount',
            'balance': 'Balance',
            'debtor': 'Debtor',
            'debtor_agent': 'DebtorAgent',
            'debtor_account': 'DebtorAccount',
            'creditor_agent': 'CreditorAgent',
            'creditor_account': 'CreditorAccount',
            'creditor': 'Creditor',
            'remittance_information': 'RemittanceInformation'
        }
        self._account_id = account_id
        self._transaction_identification = transaction_identification
        self._credit_debit_indicator = credit_debit_indicator
        self._status = status
        self._value_date_time = value_date_time
        self._amount = amount
        self._balance = balance
        self._debtor = debtor
        self._debtor_agent = debtor_agent
        self._debtor_account = debtor_account
        self._creditor_agent = creditor_agent
        self._creditor_account = creditor_account
        self._creditor = creditor
        self._remittance_information = remittance_information

    @classmethod
    def from_dict(cls, dikt) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Transaction of this Transaction.  # noqa: E501
        :rtype: Transaction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self) -> str:
        """Gets the account_id of this Transaction.

        Уникальный и неизменный идентификатор, используемый для идентификации ресурса accounts  # noqa: E501

        :return: The account_id of this Transaction.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this Transaction.

        Уникальный и неизменный идентификатор, используемый для идентификации ресурса accounts  # noqa: E501

        :param account_id: The account_id of this Transaction.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def transaction_identification(self) -> str:
        """Gets the transaction_identification of this Transaction.

        Уникальный и неизменный идентификатор, используемый для идентификации рессурса операции по счету  # noqa: E501

        :return: The transaction_identification of this Transaction.
        :rtype: str
        """
        return self._transaction_identification

    @transaction_identification.setter
    def transaction_identification(self, transaction_identification: str):
        """Sets the transaction_identification of this Transaction.

        Уникальный и неизменный идентификатор, используемый для идентификации рессурса операции по счету  # noqa: E501

        :param transaction_identification: The transaction_identification of this Transaction.
        :type transaction_identification: str
        """

        self._transaction_identification = transaction_identification

    @property
    def credit_debit_indicator(self) -> CreditDebitCode:
        """Gets the credit_debit_indicator of this Transaction.


        :return: The credit_debit_indicator of this Transaction.
        :rtype: CreditDebitCode
        """
        return self._credit_debit_indicator

    @credit_debit_indicator.setter
    def credit_debit_indicator(self, credit_debit_indicator: CreditDebitCode):
        """Sets the credit_debit_indicator of this Transaction.


        :param credit_debit_indicator: The credit_debit_indicator of this Transaction.
        :type credit_debit_indicator: CreditDebitCode
        """

        self._credit_debit_indicator = credit_debit_indicator

    @property
    def status(self) -> TransactionStatusCode:
        """Gets the status of this Transaction.


        :return: The status of this Transaction.
        :rtype: TransactionStatusCode
        """
        return self._status

    @status.setter
    def status(self, status: TransactionStatusCode):
        """Sets the status of this Transaction.


        :param status: The status of this Transaction.
        :type status: TransactionStatusCode
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def value_date_time(self) -> ISODateTime:
        """Gets the value_date_time of this Transaction.


        :return: The value_date_time of this Transaction.
        :rtype: ISODateTime
        """
        return self._value_date_time

    @value_date_time.setter
    def value_date_time(self, value_date_time: ISODateTime):
        """Sets the value_date_time of this Transaction.


        :param value_date_time: The value_date_time of this Transaction.
        :type value_date_time: ISODateTime
        """

        self._value_date_time = value_date_time

    @property
    def amount(self) -> ActiveOrHistoricCurrencyAndAmount:
        """Gets the amount of this Transaction.


        :return: The amount of this Transaction.
        :rtype: ActiveOrHistoricCurrencyAndAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount: ActiveOrHistoricCurrencyAndAmount):
        """Sets the amount of this Transaction.


        :param amount: The amount of this Transaction.
        :type amount: ActiveOrHistoricCurrencyAndAmount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def balance(self) -> Balance:
        """Gets the balance of this Transaction.


        :return: The balance of this Transaction.
        :rtype: Balance
        """
        return self._balance

    @balance.setter
    def balance(self, balance: Balance):
        """Sets the balance of this Transaction.


        :param balance: The balance of this Transaction.
        :type balance: Balance
        """

        self._balance = balance

    @property
    def debtor(self) -> PartyIdentification:
        """Gets the debtor of this Transaction.


        :return: The debtor of this Transaction.
        :rtype: PartyIdentification
        """
        return self._debtor

    @debtor.setter
    def debtor(self, debtor: PartyIdentification):
        """Sets the debtor of this Transaction.


        :param debtor: The debtor of this Transaction.
        :type debtor: PartyIdentification
        """

        self._debtor = debtor

    @property
    def debtor_agent(self) -> BranchAndFinancialInstitutionIdentification:
        """Gets the debtor_agent of this Transaction.


        :return: The debtor_agent of this Transaction.
        :rtype: BranchAndFinancialInstitutionIdentification
        """
        return self._debtor_agent

    @debtor_agent.setter
    def debtor_agent(self, debtor_agent: BranchAndFinancialInstitutionIdentification):
        """Sets the debtor_agent of this Transaction.


        :param debtor_agent: The debtor_agent of this Transaction.
        :type debtor_agent: BranchAndFinancialInstitutionIdentification
        """

        self._debtor_agent = debtor_agent

    @property
    def debtor_account(self) -> CashAccount:
        """Gets the debtor_account of this Transaction.


        :return: The debtor_account of this Transaction.
        :rtype: CashAccount
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account: CashAccount):
        """Sets the debtor_account of this Transaction.


        :param debtor_account: The debtor_account of this Transaction.
        :type debtor_account: CashAccount
        """

        self._debtor_account = debtor_account

    @property
    def creditor_agent(self) -> BranchAndFinancialInstitutionIdentification:
        """Gets the creditor_agent of this Transaction.


        :return: The creditor_agent of this Transaction.
        :rtype: BranchAndFinancialInstitutionIdentification
        """
        return self._creditor_agent

    @creditor_agent.setter
    def creditor_agent(self, creditor_agent: BranchAndFinancialInstitutionIdentification):
        """Sets the creditor_agent of this Transaction.


        :param creditor_agent: The creditor_agent of this Transaction.
        :type creditor_agent: BranchAndFinancialInstitutionIdentification
        """

        self._creditor_agent = creditor_agent

    @property
    def creditor_account(self) -> CashAccount:
        """Gets the creditor_account of this Transaction.


        :return: The creditor_account of this Transaction.
        :rtype: CashAccount
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account: CashAccount):
        """Sets the creditor_account of this Transaction.


        :param creditor_account: The creditor_account of this Transaction.
        :type creditor_account: CashAccount
        """

        self._creditor_account = creditor_account

    @property
    def creditor(self) -> PartyIdentification:
        """Gets the creditor of this Transaction.


        :return: The creditor of this Transaction.
        :rtype: PartyIdentification
        """
        return self._creditor

    @creditor.setter
    def creditor(self, creditor: PartyIdentification):
        """Sets the creditor of this Transaction.


        :param creditor: The creditor of this Transaction.
        :type creditor: PartyIdentification
        """

        self._creditor = creditor

    @property
    def remittance_information(self) -> str:
        """Gets the remittance_information of this Transaction.

        Назначение платежа  # noqa: E501

        :return: The remittance_information of this Transaction.
        :rtype: str
        """
        return self._remittance_information

    @remittance_information.setter
    def remittance_information(self, remittance_information: str):
        """Sets the remittance_information of this Transaction.

        Назначение платежа  # noqa: E501

        :param remittance_information: The remittance_information of this Transaction.
        :type remittance_information: str
        """

        self._remittance_information = remittance_information
